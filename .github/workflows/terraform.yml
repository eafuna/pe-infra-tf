name: Terraform deploy

on:
  # idealy this should be prevented by protecting branches on github
  push:
    # branches:
    #   - "main"
    paths:
      - 'aks/**'
      - '.github/workflows/terraform.yml'

  pull_request:
    # branches:
    #   - "main"
    paths:
      - 'aks/**'
      - '.github/workflows/terraform.yml'

  workflow_dispatch:
   
jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}} 
    

    steps:
      # Having issues here since I am using storage for terraform state
      # - uses: azure/login@v2
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      # - name: Azure CLI script
      #   uses: azure/cli@v2
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       az account show      

      - uses: actions/checkout@v3
        with:
          sparse-checkout: 'aks'
          sparse-checkout-cone-mode: false
      # - uses: actions/checkout@v2      
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v1

        # terraform init -backend-config=../backend/${{ env.environment }}.conf --var-file="../envs/${{ env.environment }}.tfvars;"
        # terraform plan --var-file="../envs/${{ env.environment }}.tfvars" -lock=false ...
      - name: Terraform check
        run: |
          cd aks
          terraform init
          terraform plan -lock=true -out plan.out

      - name: Terraform deploy
        if: contains(github.event.head_commit.message, '#deploy')
              
        # Idealy this should be separated along with other options that will create based on environment
        # terraform apply --auto-approve --var-file="../envs/${{ env.environment }}.tfvars" -lock=false
        run: |
          ls

      - name: Terraform destroy
        if: contains(github.event.head_commit.message, '#destroy')
              
        # Idealy this should be separated along with other options that will create based on environment
        # terraform apply --auto-approve --var-file="../envs/${{ env.environment }}.tfvars" -lock=false
        run: |
          echo "I am destroy"

  release:
    runs-on: ubuntu-latest
    needs: prepare 
    steps:
    - name: running 
      run: |
        ls